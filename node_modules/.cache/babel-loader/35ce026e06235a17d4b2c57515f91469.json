{"ast":null,"code":"import _defineProperty from \"D:\\\\React-JS\\\\Social_Network\\\\Network\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { usersAPI } from \"../API/Api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet inicialState = {\n  id: null,\n  email: null,\n  login: null,\n  isFetching: false,\n  isAuth: false\n};\n\nconst authReducer = (state = inicialState, action) => {\n  if (action.type === SET_USER_DATA) {\n    return _objectSpread({}, state, {}, action.data, {\n      isAuth: true\n    });\n  } else {\n    return state;\n  }\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  data: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport default authReducer;\nexport const authMe = (id, email, login) => {\n  return dispatch => {\n    usersAPI.authMe(id, email, login).then(data => {\n      if (data.resultCode === 0) {\n        let _data$data = data.data,\n            id = _data$data.id,\n            login = _data$data.login,\n            email = _data$data.email;\n        dispatch(setAuthUserData(id, email, login));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:\\React-JS\\Social_Network\\Network\\src\\Redux\\AuthReducer.js"],"names":["usersAPI","SET_USER_DATA","inicialState","id","email","login","isFetching","isAuth","authReducer","state","action","type","data","setAuthUserData","authMe","dispatch","then","resultCode"],"mappings":";;;;;;AAAA,SAAQA,QAAR,QAAuB,YAAvB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAC,IAFS;AAGfC,EAAAA,KAAK,EAAC,IAHS;AAIfC,EAAAA,UAAU,EAAC,KAJI;AAKfC,EAAAA,MAAM,EAAE;AALO,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAClD,MAAIA,MAAM,CAACC,IAAP,KAAgBV,aAApB,EAAmC;AAE/B,6BACOQ,KADP,MAEOC,MAAM,CAACE,IAFd;AAGIL,MAAAA,MAAM,EAAE;AAHZ;AAKH,GAPD,MAOO;AACH,WAAOE,KAAP;AACH;AACJ,CAXD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACV,EAAD,EAAIC,KAAJ,EAAUC,KAAV,EAAgBE,MAAhB,MAA4B;AAACI,EAAAA,IAAI,EAAEV,aAAP;AAAsBW,EAAAA,IAAI,EAAE;AAACT,IAAAA,EAAD;AAAIC,IAAAA,KAAJ;AAAUC,IAAAA,KAAV;AAAgBE,IAAAA;AAAhB;AAA5B,CAA5B,CAAxB;AACP,eAAeC,WAAf;AAEA,OAAO,MAAMM,MAAM,GAAC,CAACX,EAAD,EAAKC,KAAL,EAAYC,KAAZ,KAAoB;AACpC,SAASU,QAAD,IAAY;AAEhBf,IAAAA,QAAQ,CAACc,MAAT,CAAgBX,EAAhB,EAAoBC,KAApB,EAA2BC,KAA3B,EACKW,IADL,CACUJ,IAAI,IAAI;AACV,UAAIA,IAAI,CAACK,UAAL,KAAoB,CAAxB,EAA2B;AAAA,yBACEL,IAAI,CAACA,IADP;AAAA,YAClBT,EADkB,cAClBA,EADkB;AAAA,YACdE,KADc,cACdA,KADc;AAAA,YACPD,KADO,cACPA,KADO;AAExBW,QAAAA,QAAQ,CAACF,eAAe,CAACV,EAAD,EAAKC,KAAL,EAAYC,KAAZ,CAAhB,CAAR;AACF;AACJ,KANL;AAOH,GATD;AASE,CAVC","sourcesContent":["import {usersAPI} from \"../API/Api\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\nlet inicialState = {\r\n    id: null,\r\n    email:null,\r\n    login:null,\r\n    isFetching:false,\r\n    isAuth: false\r\n};\r\n\r\nconst authReducer = (state = inicialState, action) => {\r\n    if (action.type === SET_USER_DATA) {\r\n\r\n        return {\r\n            ...state,\r\n            ...action.data,\r\n            isAuth: true\r\n        };\r\n    } else {\r\n        return state\r\n    }\r\n};\r\n\r\n\r\nexport const setAuthUserData = (id,email,login,isAuth) => ({type: SET_USER_DATA, data: {id,email,login,isAuth}});\r\nexport default authReducer;\r\n\r\nexport const authMe=(id, email, login)=>{\r\n    return  (dispatch)=>{\r\n\r\n        usersAPI.authMe(id, email, login)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let {id, login, email} = data.data;\r\n                   dispatch(setAuthUserData(id, email, login));\r\n                }\r\n            });\r\n    }}"]},"metadata":{},"sourceType":"module"}