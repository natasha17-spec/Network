[{"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\index.tsx":"1","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\serviceWorker.ts":"2","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\redux-store.ts":"3","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\App.tsx":"4","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\App-reducer.ts":"5","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\hoc\\withSuspense.tsx":"6","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\ProfileContainer.tsx":"7","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\header\\Header.tsx":"8","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\common\\preloader\\Preloader.tsx":"9","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\profile-api.ts":"10","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\users-api.ts":"11","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\api.ts":"12","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\auth-api.ts":"13","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\security-api.ts":"14","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\Profile.tsx":"15","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\users\\Users.tsx":"16","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\hoc\\withAuthRedirect.tsx":"17","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\common\\FormsControls\\FormsControls.tsx":"18","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\users\\UsersSearchForm.tsx":"19","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"20","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"21","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\MyPosts\\AddPostForm\\AddPostForm.tsx":"22","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"23","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\users\\User.tsx":"24","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\common\\Paginator\\Paginator.tsx":"25","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"26","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"27","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"28","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\serviceWorker.js":"29","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\app-reducer.ts":"30","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Login\\LoginPage.tsx":"31","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\DialogsContainer.tsx":"32","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Users\\UsersContainer.tsx":"33","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Header\\Header.tsx":"34","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\common\\Preloader\\Preloader.tsx":"35","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\sidebar-reducer.ts":"36","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\profile-reducer.ts":"37","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\auth-reducer.ts":"38","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\users-reducer.ts":"39","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\dialogs-reducer.ts":"40","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\users-selectors.ts":"41","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\auth-selectors.ts":"42","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\utils\\validators\\validators.ts":"43","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\Dialogs.tsx":"44","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Users\\Users.tsx":"45","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\utils\\object-helpers.ts":"46","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Users\\UsersSearchForm.tsx":"47","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\AddMessageForm\\AddMessageForm.tsx":"48","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Users\\User.tsx":"49","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\Message\\Message.tsx":"50","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"51"},{"size":477,"mtime":1609301820000,"results":"52","hashOfConfig":"53"},{"size":4275,"mtime":1633365307371,"results":"54","hashOfConfig":"53"},{"size":1311,"mtime":1609301820000,"results":"55","hashOfConfig":"53"},{"size":6896,"mtime":1609301820000,"results":"56","hashOfConfig":"53"},{"size":1153,"mtime":1633365307366,"results":"57","hashOfConfig":"53"},{"size":280,"mtime":1609301820000,"results":"58","hashOfConfig":"53"},{"size":2674,"mtime":1609301820000,"results":"59","hashOfConfig":"53"},{"size":2119,"mtime":1633365307354,"results":"60","hashOfConfig":"53"},{"size":190,"mtime":1633365307353,"results":"61","hashOfConfig":"53"},{"size":1079,"mtime":1609301820000,"results":"62","hashOfConfig":"53"},{"size":644,"mtime":1609301820000,"results":"63","hashOfConfig":"53"},{"size":647,"mtime":1633366970464,"results":"64","hashOfConfig":"53"},{"size":744,"mtime":1609301820000,"results":"65","hashOfConfig":"53"},{"size":252,"mtime":1609301820000,"results":"66","hashOfConfig":"53"},{"size":889,"mtime":1609301820000,"results":"67","hashOfConfig":"53"},{"size":3210,"mtime":1633365307362,"results":"68","hashOfConfig":"53"},{"size":890,"mtime":1609301820000,"results":"69","hashOfConfig":"53"},{"size":1845,"mtime":1609301820000,"results":"70","hashOfConfig":"53"},{"size":2005,"mtime":1633365307364,"results":"71","hashOfConfig":"53"},{"size":550,"mtime":1609301820000,"results":"72","hashOfConfig":"53"},{"size":1218,"mtime":1609301820000,"results":"73","hashOfConfig":"53"},{"size":950,"mtime":1609301820000,"results":"74","hashOfConfig":"53"},{"size":464,"mtime":1609301820000,"results":"75","hashOfConfig":"53"},{"size":2151,"mtime":1633365307362,"results":"76","hashOfConfig":"53"},{"size":1772,"mtime":1609301820000,"results":"77","hashOfConfig":"53"},{"size":3127,"mtime":1609301820000,"results":"78","hashOfConfig":"53"},{"size":1875,"mtime":1609301820000,"results":"79","hashOfConfig":"53"},{"size":1181,"mtime":1609301820000,"results":"80","hashOfConfig":"53"},{"size":4948,"mtime":1609301820000,"results":"81","hashOfConfig":"53"},{"size":907,"mtime":1609301820000,"results":"82","hashOfConfig":"53"},{"size":2362,"mtime":1609301820000,"results":"83","hashOfConfig":"53"},{"size":528,"mtime":1609301820000,"results":"84","hashOfConfig":"53"},{"size":500,"mtime":1609301820000,"results":"85","hashOfConfig":"53"},{"size":1909,"mtime":1609301820000,"results":"86","hashOfConfig":"53"},{"size":275,"mtime":1609301820000,"results":"87","hashOfConfig":"53"},{"size":182,"mtime":1609301820000,"results":"88","hashOfConfig":"53"},{"size":3720,"mtime":1609301820000,"results":"89","hashOfConfig":"53"},{"size":2824,"mtime":1609301820000,"results":"90","hashOfConfig":"53"},{"size":4710,"mtime":1609301820000,"results":"91","hashOfConfig":"53"},{"size":1308,"mtime":1609301820000,"results":"92","hashOfConfig":"53"},{"size":900,"mtime":1609301820000,"results":"93","hashOfConfig":"53"},{"size":228,"mtime":1609301820000,"results":"94","hashOfConfig":"53"},{"size":389,"mtime":1609301820000,"results":"95","hashOfConfig":"53"},{"size":1294,"mtime":1609301820000,"results":"96","hashOfConfig":"53"},{"size":3304,"mtime":1609301820000,"results":"97","hashOfConfig":"53"},{"size":258,"mtime":1609301820000,"results":"98","hashOfConfig":"53"},{"size":1832,"mtime":1609301820000,"results":"99","hashOfConfig":"53"},{"size":1096,"mtime":1609301820000,"results":"100","hashOfConfig":"53"},{"size":1957,"mtime":1609301820000,"results":"101","hashOfConfig":"53"},{"size":246,"mtime":1609301820000,"results":"102","hashOfConfig":"53"},{"size":405,"mtime":1609301820000,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"35g8rp",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"106"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"106"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"106"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"106"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"106"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"106"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"106"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"106"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"106"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"106"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"106"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"106"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"106"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"106"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\index.tsx",[],["224","225"],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\serviceWorker.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\redux-store.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\App.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\App-reducer.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\hoc\\withSuspense.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\ProfileContainer.tsx",["226","227"],"import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {AppStateType} from '../../redux/redux-store';\nimport {ProfileType} from '../../types/types';\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n    constructor(props: PropsType) {\n        super(props);\n    }\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                // todo: may be replace push with Redirect??\n                this.props.history.push(\"/login\");\n            }\n        }\n\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    componentWillUnmount(): void {\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    //console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);\n\n\n\n\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\header\\Header.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\common\\preloader\\Preloader.tsx",["228"],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\profile-api.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\users-api.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\api.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\auth-api.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\api\\security-api.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\Profile.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\users\\Users.tsx",["229","230"],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\common\\FormsControls\\FormsControls.tsx",["231"],"import React from \"react\"\nimport styles from \"./FormsControls.module.css\"\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\nimport {LoginFormValuesType} from '../../Login/LoginPage';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                            name: FormKeysType,\n                            validators: Array<FieldValidatorType>,\n                            component: React.FC<WrappedFieldProps>,\n                            props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\users\\UsersSearchForm.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["232"],"import React from 'react';\nimport {actions} from \"../../../redux/profile-reducer\";\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from '../../../redux/redux-store';\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\n    addPost: actions.addPostActionCreator\n})(MyPosts);\n\nexport default MyPostsContainer;\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["233","234","235","236","237"],"import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport AddPostForm, {AddPostFormValuesType} from './AddPostForm/AddPostForm';\nimport {PostType} from '../../../types/types';\n\n\nexport type MapPropsType = {\n    posts: Array<PostType>\n}\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\n    let postsElements =\n        [...props.posts]\n            .reverse()\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\n\n    let onAddPost = (values: AddPostFormValuesType) => {\n        props.addPost(values.newPostText);\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddPostForm onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\nconst MyPostsMemorized = React.memo(MyPosts);\n\nexport default MyPostsMemorized;\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\MyPosts\\AddPostForm\\AddPostForm.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",["238"],"import React from 'react';\nimport s from './Post.module.css';\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={s.item}>\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\n        { props.message }\n          <div>\n        <span>like</span> { props.likesCount }\n      </div>\n    </div>\n  )\n}\n\nexport default Post;\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\users\\User.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\common\\Paginator\\Paginator.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["239"],"import React, {ChangeEvent, useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport {ContactsType, ProfileType} from '../../../types/types';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        // todo: remove then\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\n\n                { editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n        <div>\n            <b>Full name</b>: {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n        }\n\n        <div>\n            <b>About me</b>: {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts</b>: {\n            Object\n                .keys(profile.contacts)\n                .map((key)  => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n    </div>\n}\n\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo;\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\serviceWorker.js",[],["240","241"],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\app-reducer.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Login\\LoginPage.tsx",["242"],"import React from 'react'\nimport {InjectedFormProps, reduxForm} from 'redux-form'\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls'\nimport {required} from '../../utils/validators/validators'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {login} from '../../redux/auth-reducer'\nimport {Redirect} from 'react-router-dom'\nimport style from './../common/FormsControls/FormsControls.module.css'\nimport {AppStateType} from '../../redux/redux-store'\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\n    = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\n\n            {captchaUrl && <img src={captchaUrl}/>}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\n\n\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>\n            }\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\nexport const LoginPage: React.FC = () => {\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n    </div>\n}\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\DialogsContainer.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Users\\UsersContainer.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\common\\Preloader\\Preloader.tsx",["243","244"],"import React from 'react';\nimport preloader from \"../../../assets/images/preloader.svg\";\n\ntype PropsType = {\n}\n\nlet Preloader: React.FC = () => {\n    return <div  style={ { backgroundColor: 'white' } }>\n        <img src={preloader} />\n    </div>\n}\n\nexport default Preloader;\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\sidebar-reducer.ts",["245"],"let initialState = {}\ntype InitialStateType = typeof initialState\nconst sidebarReducer = (state = initialState, action: any) => {\n    return state;\n}\n\nexport default sidebarReducer;\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\profile-reducer.ts",["246","247"],"import {FormAction, stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from '../types/types';\nimport {usersAPI} from '../api/users-api';\nimport {profileAPI} from '../api/profile-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\n        {id: 3, message: 'Blabla', likesCount: 11},\n        {id: 4, message: 'Dada', likesCount: 11}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'SN/PROFILE/ADD-POST': {\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            };\n        }\n        case 'SN/PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'SN/PROFILE/SET_USER_PROFILE': {\n            return {...state, profile: action.profile}\n        }\n\n        case 'SN/PROFILE/DELETE_POST':\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\n\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        default:\n            return state;\n    }\n}\n\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    try {\n        let data = await profileAPI.updateStatus(status)\n\n        if (data.resultCode === 0) {\n            dispatch(actions.setStatus(status))\n        }\n    } catch(error) {\n        //\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file)\n\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId\n    const data = await profileAPI.saveProfile(profile)\n\n    if (data.resultCode === 0) {\n        if (userId != null) {\n            dispatch(getUserProfile(userId))\n        } else {\n            throw new Error(\"userId can't be null\")\n        }\n    } else {\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\n        return Promise.reject(data.messages[0])\n    }\n}\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\auth-reducer.ts",["248"],"import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {authAPI} from '../api/auth-api';\nimport {securityAPI} from '../api/security-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\nimport {Action} from 'redux';\nimport {FormAction} from 'redux-form/lib/actions';\n\nlet initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me()\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl()\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = (): ThunkType => async (dispatch: any) => {\n    let response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\users-reducer.ts",["249","250"],"import {updateObjectInArray} from '../utils/object-helpers'\nimport {UserType} from '../types/types'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {Dispatch} from 'redux'\nimport {usersAPI} from '../api/users-api'\nimport {APIResponseType} from '../api/api'\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of users ids,\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case 'SN/USERS/SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n        count: totalUsersCount\n    } as const),\n    toggleIsFetching: (isFetching: boolean) => ({\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\n        isFetching\n    } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const)\n}\n\nexport const requestUsers = (page: number,\n                             pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(page))\n        dispatch(actions.setFilter(filter))\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, userId))\n    let response = await apiMethod(userId)\n\n    if (response.resultCode == 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n    }\n}\n\nexport default usersReducer\n\nexport type InitialState = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\dialogs-reducer.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\users-selectors.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\redux\\auth-selectors.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\utils\\validators\\validators.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\Dialogs.tsx",["251"],"import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\nimport {InitialStateType} from '../../redux/dialogs-reducer';\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\n\n    let addNewMessage = (values: NewMessageFormValuesType) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                { dialogsElements }\n            </div>\n            <div className={s.messages}>\n                <div>{ messagesElements }</div>\n            </div>\n            <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\nexport default Dialogs;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Users\\Users.tsx",["252","253"],"import React, {FC, useEffect} from 'react'\nimport Paginator from '../common/Paginator/Paginator'\nimport User from './User'\nimport {UsersSearchForm} from './UsersSearchForm'\nimport {FilterType, requestUsers} from '../../redux/users-reducer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from '../../redux/users-selectors'\nimport {useHistory} from 'react-router-dom'\nimport * as queryString from 'querystring'\n\ntype PropsType = {}\n\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\nexport const Users: FC<PropsType> = (props) => {\n\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n\n\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch(parsed.friend) {\n            case \"null\":\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case \"true\":\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case \"false\":\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/developers',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n    const follow = (userId: number) => {\n        dispatch(follow(userId));\n    }\n    const unfollow = (userId: number) => {\n        dispatch(unfollow(userId));\n    }\n\n    return <div>\n\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\n        <div>\n            {\n                users.map(u => <User user={u}\n                                     followingInProgress={followingInProgress}\n                                     key={u.id}\n                                     unfollow={unfollow}\n                                     follow={follow}\n                    />\n                )\n            }\n        </div>\n    </div>\n}\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\utils\\object-helpers.ts",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Users\\UsersSearchForm.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\AddMessageForm\\AddMessageForm.tsx",["254","255","256"],"import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from '../../common/FormsControls/FormsControls';\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {NewMessageFormValuesType} from '../Dialogs';\nimport {LoginFormValuesType} from '../../Login/LoginPage';\n\nconst maxLength50 = maxLengthCreator(50);\n\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\ntype PropsType = {}\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\n    = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)}\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Users\\User.tsx",["257"],"import React from 'react'\nimport styles from './users.module.css'\nimport userPhoto from '../../assets/images/user.png'\nimport {NavLink} from 'react-router-dom'\nimport {UserType} from '../../types/types'\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n    return (\n        <div>\n                <span>\n                    <div>\n                       <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\n                             className={styles.userPhoto}/>\n                       </NavLink>\n                    </div>\n                    <div>\n                        {user.followed\n                            ? <button disabled={followingInProgress\n                                .some(id => id === user.id)}\n                                      onClick={() => {\n                                          unfollow(user.id)\n                                      }}>\n                                Unfollow</button>\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\n                                      onClick={() => {\n                                          follow(user.id)\n                                      }}>\n                                Follow</button>}\n\n                    </div>\n                </span>\n            <span>\n                    <span>\n                        <div>{user.name}</div>\n                        <div>{user.status}</div>\n                    </span>\n                    <span>\n                        <div>{'user.location.country'}</div>\n                        <div>{'user.location.city'}</div>\n                    </span>\n                </span>\n        </div>)\n}\n\nexport default User\n","C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\Message\\Message.tsx",[],"C:\\Users\\Natali\\Desktop\\social\\Network\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","severity":1,"message":"263","line":26,"column":5,"nodeType":"264","messageId":"265","endLine":28,"endColumn":6},{"ruleId":"266","severity":1,"message":"267","line":53,"column":44,"nodeType":"268","messageId":"269","endLine":53,"endColumn":46},{"ruleId":"270","severity":1,"message":"271","line":5,"column":12,"nodeType":"272","endLine":5,"endColumn":53},{"ruleId":"273","severity":1,"message":"274","line":72,"column":8,"nodeType":"275","endLine":72,"endColumn":10,"suggestions":"276"},{"ruleId":"273","severity":1,"message":"277","line":79,"column":7,"nodeType":"275","endLine":79,"endColumn":27,"suggestions":"278"},{"ruleId":"279","severity":1,"message":"280","line":6,"column":9,"nodeType":"281","messageId":"282","endLine":6,"endColumn":28},{"ruleId":"279","severity":1,"message":"283","line":1,"column":8,"nodeType":"281","messageId":"282","endLine":1,"endColumn":13},{"ruleId":"279","severity":1,"message":"284","line":4,"column":9,"nodeType":"281","messageId":"282","endLine":4,"endColumn":14},{"ruleId":"279","severity":1,"message":"285","line":4,"column":16,"nodeType":"281","messageId":"282","endLine":4,"endColumn":25},{"ruleId":"279","severity":1,"message":"286","line":5,"column":9,"nodeType":"281","messageId":"282","endLine":5,"endColumn":25},{"ruleId":"279","severity":1,"message":"287","line":5,"column":27,"nodeType":"281","messageId":"282","endLine":5,"endColumn":35},{"ruleId":"279","severity":1,"message":"288","line":6,"column":9,"nodeType":"281","messageId":"282","endLine":6,"endColumn":17},{"ruleId":"270","severity":1,"message":"271","line":12,"column":7,"nodeType":"272","endLine":12,"endColumn":108},{"ruleId":"270","severity":1,"message":"271","line":44,"column":17,"nodeType":"272","endLine":44,"endColumn":87},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"270","severity":1,"message":"271","line":23,"column":28,"nodeType":"272","endLine":23,"endColumn":51},{"ruleId":"279","severity":1,"message":"289","line":4,"column":6,"nodeType":"281","messageId":"282","endLine":4,"endColumn":15},{"ruleId":"270","severity":1,"message":"271","line":9,"column":9,"nodeType":"272","endLine":9,"endColumn":32},{"ruleId":"279","severity":1,"message":"290","line":2,"column":6,"nodeType":"281","messageId":"282","endLine":2,"endColumn":22},{"ruleId":"279","severity":1,"message":"291","line":3,"column":9,"nodeType":"281","messageId":"282","endLine":3,"endColumn":17},{"ruleId":"266","severity":1,"message":"267","line":43,"column":67,"nodeType":"268","messageId":"269","endLine":43,"endColumn":69},{"ruleId":"279","severity":1,"message":"292","line":6,"column":9,"nodeType":"281","messageId":"282","endLine":6,"endColumn":15},{"ruleId":"266","severity":1,"message":"267","line":53,"column":65,"nodeType":"268","messageId":"269","endLine":53,"endColumn":67},{"ruleId":"266","severity":1,"message":"293","line":103,"column":29,"nodeType":"268","messageId":"269","endLine":103,"endColumn":31},{"ruleId":"279","severity":1,"message":"294","line":5,"column":9,"nodeType":"281","messageId":"282","endLine":5,"endColumn":17},{"ruleId":"273","severity":1,"message":"274","line":57,"column":8,"nodeType":"275","endLine":57,"endColumn":10,"suggestions":"295"},{"ruleId":"273","severity":1,"message":"277","line":70,"column":8,"nodeType":"275","endLine":70,"endColumn":29,"suggestions":"296"},{"ruleId":"279","severity":1,"message":"284","line":2,"column":9,"nodeType":"281","messageId":"282","endLine":2,"endColumn":14},{"ruleId":"279","severity":1,"message":"297","line":3,"column":22,"nodeType":"281","messageId":"282","endLine":3,"endColumn":27},{"ruleId":"279","severity":1,"message":"280","line":6,"column":9,"nodeType":"281","messageId":"282","endLine":6,"endColumn":28},{"ruleId":"270","severity":1,"message":"271","line":20,"column":25,"nodeType":"272","endLine":21,"endColumn":60},"no-native-reassign",["298"],"no-negated-in-lhs",["299"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage', 'dispatch', 'filter', 'history.location.search', and 'pageSize'. Either include them or remove the dependency array.","ArrayExpression",["300"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["301"],"@typescript-eslint/no-unused-vars","'LoginFormValuesType' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'Field' is defined but never used.","'reduxForm' is defined but never used.","'maxLengthCreator' is defined but never used.","'required' is defined but never used.","'Textarea' is defined but never used.","'PropsType' is defined but never used.","'InitialStateType' is defined but never used.","'usersAPI' is defined but never used.","'Action' is defined but never used.","Expected '===' and instead saw '=='.","'Redirect' is defined but never used.",["302"],["303"],"'Input' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"304","fix":"308"},{"desc":"306","fix":"309"},"Update the dependencies array to be: [currentPage, dispatch, filter, history.location.search, pageSize]",{"range":"310","text":"311"},"Update the dependencies array to be: [filter, currentPage, history]",{"range":"312","text":"313"},{"range":"314","text":"311"},{"range":"315","text":"313"},[2268,2270],"[currentPage, dispatch, filter, history.location.search, pageSize]",[2457,2477],"[filter, currentPage, history]",[1870,1872],[2257,2278]]