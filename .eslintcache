[{"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\index.tsx":"1","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\serviceWorker.ts":"2","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\redux-store.ts":"3","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\App.tsx":"4","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\DialogsReducer.ts":"5","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\ProfileReducer.ts":"6","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\UsersReducer.ts":"7","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\NavBarReducer.ts":"8","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\AuthReducer.ts":"9","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\App-reducer.ts":"10","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\hoc\\withSuspense.tsx":"11","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\login\\login.tsx":"12","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\users\\UsersContainer.tsx":"13","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n5_Settings\\Settings.tsx":"14","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\header\\HeaderContainer.tsx":"15","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n3_Music\\Music.tsx":"16","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n1_Path\\Path.tsx":"17","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n4_News\\News.tsx":"18","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\DialogsContainer.tsx":"19","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\users-api.ts":"20","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\profile-api.ts":"21","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\security-api.ts":"22","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\api.ts":"23","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\auth-api.ts":"24","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\utils\\objects-helper.ts":"25","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\utils\\validatos\\validators.ts":"26","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\users\\Users.tsx":"27","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\users-selector.tsx":"28","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\Dialogs.tsx":"29","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\header\\Header.tsx":"30","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\hoc\\withAuthRedirect.tsx":"31","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\common\\FormsControls\\FormsControls.tsx":"32","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\users\\User.tsx":"33","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\common\\Paginator\\Paginator.tsx":"34","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\Dialogitem\\Dialogitem.tsx":"35","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\Message\\Message.tsx":"36","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\AddMessageForm\\AddMessageForm.tsx":"37","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\ProfileContainer.tsx":"38","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\Profile.tsx":"39","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"40","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"41","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"42","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"43","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\common\\preloader\\Preloader.tsx":"44","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"45","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\MyPosts\\AddPostForm\\AddPostForm.tsx":"46","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"47"},{"size":695,"mtime":1609578024811,"results":"48","hashOfConfig":"49"},{"size":4275,"mtime":1609578024814,"results":"50","hashOfConfig":"49"},{"size":1387,"mtime":1609578024814,"results":"51","hashOfConfig":"49"},{"size":3237,"mtime":1609582368257,"results":"52","hashOfConfig":"49"},{"size":1426,"mtime":1609578024812,"results":"53","hashOfConfig":"49"},{"size":4511,"mtime":1609578024813,"results":"54","hashOfConfig":"49"},{"size":4200,"mtime":1609578024813,"results":"55","hashOfConfig":"49"},{"size":349,"mtime":1609578024813,"results":"56","hashOfConfig":"49"},{"size":3142,"mtime":1609578024812,"results":"57","hashOfConfig":"49"},{"size":1153,"mtime":1609578024812,"results":"58","hashOfConfig":"49"},{"size":349,"mtime":1609580942526,"results":"59","hashOfConfig":"49"},{"size":3073,"mtime":1609578024804,"results":"60","hashOfConfig":"49"},{"size":2514,"mtime":1609580942549,"results":"61","hashOfConfig":"49"},{"size":172,"mtime":1609578024808,"results":"62","hashOfConfig":"49"},{"size":924,"mtime":1609578024803,"results":"63","hashOfConfig":"49"},{"size":165,"mtime":1609578024807,"results":"64","hashOfConfig":"49"},{"size":1119,"mtime":1609578024805,"results":"65","hashOfConfig":"49"},{"size":157,"mtime":1609578024808,"results":"66","hashOfConfig":"49"},{"size":547,"mtime":1609578024807,"results":"67","hashOfConfig":"49"},{"size":757,"mtime":1609578024793,"results":"68","hashOfConfig":"49"},{"size":1110,"mtime":1609578024793,"results":"69","hashOfConfig":"49"},{"size":261,"mtime":1609578024793,"results":"70","hashOfConfig":"49"},{"size":659,"mtime":1609578024792,"results":"71","hashOfConfig":"49"},{"size":804,"mtime":1609578024792,"results":"72","hashOfConfig":"49"},{"size":258,"mtime":1609578024815,"results":"73","hashOfConfig":"49"},{"size":399,"mtime":1609578024816,"results":"74","hashOfConfig":"49"},{"size":1528,"mtime":1609578024809,"results":"75","hashOfConfig":"49"},{"size":823,"mtime":1609578024814,"results":"76","hashOfConfig":"49"},{"size":1410,"mtime":1609578024806,"results":"77","hashOfConfig":"49"},{"size":828,"mtime":1609578024803,"results":"78","hashOfConfig":"49"},{"size":896,"mtime":1609578024810,"results":"79","hashOfConfig":"49"},{"size":1833,"mtime":1609578024801,"results":"80","hashOfConfig":"49"},{"size":1939,"mtime":1609578024809,"results":"81","hashOfConfig":"49"},{"size":1950,"mtime":1609578024802,"results":"82","hashOfConfig":"49"},{"size":413,"mtime":1609578024806,"results":"83","hashOfConfig":"49"},{"size":253,"mtime":1609578024807,"results":"84","hashOfConfig":"49"},{"size":1029,"mtime":1609578024805,"results":"85","hashOfConfig":"49"},{"size":2687,"mtime":1609580095163,"results":"86","hashOfConfig":"49"},{"size":892,"mtime":1609580551453,"results":"87","hashOfConfig":"49"},{"size":548,"mtime":1609580942544,"results":"88","hashOfConfig":"49"},{"size":3147,"mtime":1609580942539,"results":"89","hashOfConfig":"49"},{"size":1875,"mtime":1589434812000,"results":"90","hashOfConfig":"49"},{"size":1181,"mtime":1589434812000,"results":"91","hashOfConfig":"49"},{"size":190,"mtime":1609578024802,"results":"92","hashOfConfig":"49"},{"size":1032,"mtime":1609580942556,"results":"93","hashOfConfig":"49"},{"size":949,"mtime":1609580095191,"results":"94","hashOfConfig":"49"},{"size":464,"mtime":1589434812000,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"j8u218",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"98"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"98"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"98"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\index.tsx",[],["195","196"],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\serviceWorker.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\redux-store.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\App.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\DialogsReducer.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\ProfileReducer.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\UsersReducer.ts",["197"],"import {updateObjectInArray} from \"../utils/objects-helper\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {UserType} from \"../types/types\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 15,\r\n    totalUsersCount: 28,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n};\r\ntype InitialStateType = typeof initialState\r\n\r\nconst usersReducer = (state= initialState, action: ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId,\r\n                    \"id\", {followed: true})\r\n            };\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            };\r\n        case 'SET_USERS':\r\n            return {...state, users: action.users};\r\n\r\n        case 'SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage};\r\n\r\n        case 'SET_TOTAL_USERS_COUNT':\r\n\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        case 'TOGGLE_IS_FETCHING':\r\n\r\n            return {...state, isFetching: action.isFetching};\r\n        case 'TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n//*Action creators\r\nexport const actions = {\r\n    followSuccsess: (userId: number) => ({type: 'FOLLOW', userId} as const),\r\n    unfollowSuccsess: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    toogleIsFetching: (isFetching: boolean) => ({type: 'TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toogleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const),\r\n}\r\n\r\nexport const getUsers = (page: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        dispatch(actions.toogleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(actions.toogleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    };\r\n};\r\n\r\n\r\nexport default usersReducer;\r\nconst followUnfollowFlow = async (dispatch: ThunkDispatchType, userId: number,\r\n                                  apiMethod: any,\r\n                                  actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toogleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toogleFollowingProgress(false, userId));\r\n}\r\n\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccsess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccsess);\r\n    }\r\n}\r\n\r\n//*Общий\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionsTypes>\r\n","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\NavBarReducer.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\AuthReducer.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\App-reducer.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\hoc\\withSuspense.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\login\\login.tsx",["198"],"import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required} from \"../../utils/validatos/validators\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from \"./../common/FormsControls/FormsControls.module.css\"\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {login} from \"../../redux/AuthReducer\";\r\n\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\nconst LoginForm:React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit,captchaUrl,error}) => {\r\n    return (\r\n        <div className={styles.form}>\r\n            <form onSubmit={handleSubmit}>\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\",\"email\",[required],Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\",\"password\",[required],Input,{type: \"password\"})}\r\n                <div>\r\n                {createField<LoginFormValuesTypeKeys>(undefined,\"remember_me\",[], Input,{type: \"checkbox\"},\"remember me\")}\r\n                </div>\r\n               <div className={styles.captcha}>\r\n                   { captchaUrl && <img src={captchaUrl} />}\r\n                   { captchaUrl && createField(\r\n                       \"symbols\",\r\n                       \"captcha\",\r\n                       [required],\r\n                       Input) }\r\n               </div>\r\n                {error &&\r\n                <div className={styles.formSummaryContainer}>\r\n                    <div className={styles.formSummaryError}>{error}</div>\r\n                </div>\r\n                }\r\n                <div className={styles.formOnButton}>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\r\ntype MapStatePropsType = {\r\n    captchaUrl:string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login:(email:string, password: string, rememberMe: boolean, captcha: string)=>void\r\n}\r\ntype LoginFormValuesType = {\r\n    email:  string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nexport type LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nconst Login:React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData:LoginFormValuesType)=>{\r\n        props.login(formData.email, formData.password, formData.rememberMe,formData.captcha)\r\n    };\r\n\r\n    if (props.isAuth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div className={styles.login}>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n    </div>\r\n};\r\n\r\n\r\nconst mapStateToProps =(state:AppStateType):MapStatePropsType=>({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\users\\UsersContainer.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n5_Settings\\Settings.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\header\\HeaderContainer.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n3_Music\\Music.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n1_Path\\Path.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n4_News\\News.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\DialogsContainer.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\users-api.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\profile-api.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\security-api.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\api.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\api\\auth-api.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\utils\\objects-helper.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\utils\\validatos\\validators.ts",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\users\\Users.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\redux\\users-selector.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\Dialogs.tsx",["199"],"import React from 'react';\r\nimport p from './Dialogs.module.css'\r\nimport DialogItem from \"./Dialogitem/Dialogitem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitialStateType} from \"../../../redux/DialogsReducer\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\ntype PropsType = {\r\n    dialogsPage:InitialStateType\r\n    sendMessage:(newMessageText:string)=>void\r\n}\r\n\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody:  string\r\n}\r\n\r\n\r\nconst Dialogs:React.FC<PropsType> = (props) => {\r\n    let state= props.dialogsPage;\r\n    let dialogsElements = state.dialogsData.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\r\n    let messagesElements = state.messagesData.map(message => <Message message={message.message} key={message.id}/>);\r\n\r\n\r\n    let addNewMessage=(values:NewMessageFormValuesType)=>{\r\n        props.sendMessage(values.newMessageBody);\r\n        values.newMessageBody=\"\"\r\n    };\r\n\r\n\r\n    // @ts-ignore\r\n    // @ts-ignore\r\n    return (\r\n        <div className={p.dialogs}>\r\n            <div className={p.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={p.messages}>\r\n                <div>{messagesElements}</div>\r\n                // @ts-ignore\r\n                    <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\header\\Header.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\common\\FormsControls\\FormsControls.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\users\\User.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\common\\Paginator\\Paginator.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\Dialogitem\\Dialogitem.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\Message\\Message.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\navbar\\n2_Dialogs\\AddMessageForm\\AddMessageForm.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\ProfileContainer.tsx",["200","201"],"import React from 'react';\nimport {connect} from \"react-redux\";\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {AppStateType} from '../../redux/redux-store';\nimport {ProfileType} from '../../types/types';\n// @ts-ignore\nimport Profile from \"./Profile\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/ProfileReducer\";\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n    constructor(props: PropsType) {\n        super(props);\n    }\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                // todo: may be replace push with Redirect??\n                this.props.history.push(\"/login\");\n            }\n        }\n\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    componentWillUnmount(): void {\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    //console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);\n\n\n\n\n","C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\Profile.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["202"],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["203"],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\common\\preloader\\Preloader.tsx",["204"],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\MyPosts\\AddPostForm\\AddPostForm.tsx",[],"C:\\Users\\Natali\\Desktop\\earg\\Network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",["205"],{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":48,"column":65,"nodeType":"212","messageId":"213","endLine":48,"endColumn":67},{"ruleId":"214","severity":1,"message":"215","line":25,"column":36,"nodeType":"216","endLine":25,"endColumn":60},{"ruleId":"217","severity":1,"message":"218","line":39,"column":46,"nodeType":"219","endLine":41,"endColumn":21},{"ruleId":"220","severity":1,"message":"221","line":27,"column":5,"nodeType":"222","messageId":"223","endLine":29,"endColumn":6},{"ruleId":"210","severity":1,"message":"211","line":54,"column":44,"nodeType":"212","messageId":"213","endLine":54,"endColumn":46},{"ruleId":"224","severity":1,"message":"225","line":1,"column":8,"nodeType":"226","messageId":"227","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"215","line":46,"column":17,"nodeType":"216","endLine":46,"endColumn":87},{"ruleId":"214","severity":1,"message":"215","line":5,"column":12,"nodeType":"216","endLine":5,"endColumn":53},{"ruleId":"214","severity":1,"message":"215","line":12,"column":7,"nodeType":"216","endLine":12,"endColumn":108},"no-native-reassign",["228"],"no-negated-in-lhs",["229"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]